/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LeaveType } from "./LeaveType";
import { LeaveTypeCountArgs } from "./LeaveTypeCountArgs";
import { LeaveTypeFindManyArgs } from "./LeaveTypeFindManyArgs";
import { LeaveTypeFindUniqueArgs } from "./LeaveTypeFindUniqueArgs";
import { CreateLeaveTypeArgs } from "./CreateLeaveTypeArgs";
import { UpdateLeaveTypeArgs } from "./UpdateLeaveTypeArgs";
import { DeleteLeaveTypeArgs } from "./DeleteLeaveTypeArgs";
import { LeaveFindManyArgs } from "../../leave/base/LeaveFindManyArgs";
import { Leave } from "../../leave/base/Leave";
import { LeaveTypeService } from "../leaveType.service";
@graphql.Resolver(() => LeaveType)
export class LeaveTypeResolverBase {
  constructor(protected readonly service: LeaveTypeService) {}

  async _leaveTypesMeta(
    @graphql.Args() args: LeaveTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LeaveType])
  async leaveTypes(
    @graphql.Args() args: LeaveTypeFindManyArgs
  ): Promise<LeaveType[]> {
    return this.service.leaveTypes(args);
  }

  @graphql.Query(() => LeaveType, { nullable: true })
  async leaveType(
    @graphql.Args() args: LeaveTypeFindUniqueArgs
  ): Promise<LeaveType | null> {
    const result = await this.service.leaveType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LeaveType)
  async createLeaveType(
    @graphql.Args() args: CreateLeaveTypeArgs
  ): Promise<LeaveType> {
    return await this.service.createLeaveType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LeaveType)
  async updateLeaveType(
    @graphql.Args() args: UpdateLeaveTypeArgs
  ): Promise<LeaveType | null> {
    try {
      return await this.service.updateLeaveType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LeaveType)
  async deleteLeaveType(
    @graphql.Args() args: DeleteLeaveTypeArgs
  ): Promise<LeaveType | null> {
    try {
      return await this.service.deleteLeaveType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Leave], { name: "leaves" })
  async findLeaves(
    @graphql.Parent() parent: LeaveType,
    @graphql.Args() args: LeaveFindManyArgs
  ): Promise<Leave[]> {
    const results = await this.service.findLeaves(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
